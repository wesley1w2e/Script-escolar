(async () => {
  const SENHA_CORRETA = "estudiolaw";

  // Criar modal de senha
  function criarModalSenha() {
    const style = document.createElement("style");
    style.textContent = `
      #modalSenhaLaw {
        position: fixed;top:0;left:0;width:100vw;height:100vh;
        background: rgba(0,0,0,0.9);
        display: flex;justify-content: center;align-items: center;
        z-index: 999999; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        user-select: none;
      }
      #modalSenhaLaw .container {
        background: linear-gradient(145deg, #0b1a2f, #001122);
        border-radius: 16px; box-shadow: 0 0 20px #3a72ff99;
        padding: 40px 60px;
        width: 380px; max-width: 90vw;
        text-align: center;
        color: #cce5ff;
      }
      #modalSenhaLaw h2 {
        margin-bottom: 20px;
        font-weight: 700;
        font-size: 2.2rem;
        color: #4da3ff;
        text-shadow: 0 0 8px #72aaff;
      }
      #modalSenhaLaw input[type=password] {
        width: 100%;
        padding: 15px 12px;
        font-size: 1.2rem;
        border-radius: 10px;
        border: 2px solid #4da3ff;
        background: #001a44;
        color: #d0e6ff;
        box-shadow: inset 0 0 6px #1a4dc9;
        outline: none;
        transition: border-color 0.3s ease;
        font-weight: 600;
      }
      #modalSenhaLaw input[type=password]:focus {
        border-color: #72b2ff;
        box-shadow: 0 0 10px #72b2ff;
        background: #002b7a;
      }
      #modalSenhaLaw button {
        margin-top: 30px;
        padding: 15px 30px;
        font-size: 1.3rem;
        font-weight: 700;
        border-radius: 12px;
        border: none;
        background: #4da3ff;
        color: white;
        cursor: pointer;
        box-shadow: 0 0 20px #4da3ffaa;
        transition: background-color 0.3s ease;
      }
      #modalSenhaLaw button:hover {
        background: #72b2ff;
        box-shadow: 0 0 25px #72b2ffbb;
      }
      #modalSenhaLaw .msgErro {
        margin-top: 15px;
        color: #ff6b6b;
        font-weight: 700;
        min-height: 1.5rem;
        font-size: 1rem;
        user-select: text;
      }
    `;
    document.head.appendChild(style);

    const modal = document.createElement("div");
    modal.id = "modalSenhaLaw";
    modal.innerHTML = `
      <div class="container">
        <h2>Digite a senha para continuar</h2>
        <input id="inputSenhaLaw" type="password" placeholder="Senha" autocomplete="off" />
        <button id="btnEntrarLaw">Entrar</button>
        <div class="msgErro" id="msgErroLaw"></div>
      </div>
    `;
    document.body.appendChild(modal);
    return modal;
  }

  // Função para criar fogos animados simples (canvas)
  function criarFogosAnimados() {
    const canvas = document.createElement("canvas");
    canvas.style.position = "fixed";
    canvas.style.top = "0";
    canvas.style.left = "0";
    canvas.style.width = "100vw";
    canvas.style.height = "100vh";
    canvas.style.pointerEvents = "none";
    canvas.style.zIndex = "999999";
    document.body.appendChild(canvas);

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const ctx = canvas.getContext("2d");

    class Firework {
      constructor() {
        this.reset();
      }
      reset() {
        this.x = Math.random() * canvas.width;
        this.y = canvas.height;
        this.targetY = Math.random() * (canvas.height / 2);
        this.speed = 3 + Math.random() * 2;
        this.particles = [];
        this.exploded = false;
        this.color = `hsl(${Math.random() * 360}, 80%, 60%)`;
      }
      update() {
        if (!this.exploded) {
          this.y -= this.speed;
          if (this.y <= this.targetY) {
            this.explode();
          }
        } else {
          this.particles.forEach(p => p.update());
          this.particles = this.particles.filter(p => !p.dead);
          if (this.particles.length === 0) this.reset();
        }
      }
      explode() {
        this.exploded = true;
        for (let i = 0; i < 30; i++) {
          this.particles.push(new Particle(this.x, this.y, this.color));
        }
      }
      draw() {
        if (!this.exploded) {
          ctx.beginPath();
          ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
          ctx.fillStyle = this.color;
          ctx.fill();
        } else {
          this.particles.forEach(p => p.draw());
        }
      }
    }

    class Particle {
      constructor(x, y, color) {
        this.x = x;
        this.y = y;
        this.color = color;
        this.speedX = (Math.random() - 0.5) * 5;
        this.speedY = (Math.random() - 0.5) * 5;
        this.gravity = 0.05;
        this.alpha = 1;
        this.dead = false;
      }
      update() {
        this.speedY += this.gravity;
        this.x += this.speedX;
        this.y += this.speedY;
        this.alpha -= 0.02;
        if (this.alpha <= 0) this.dead = true;
      }
      draw() {
        ctx.save();
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.restore();
      }
    }

    const fireworks = [];
    for (let i = 0; i < 5; i++) fireworks.push(new Firework());

    function animar() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      fireworks.forEach(fw => {
        fw.update();
        fw.draw();
      });
      requestAnimationFrame(animar);
    }
    animar();

    window.addEventListener("resize", () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });

    return canvas;
  }

  // Função animação abertura Estúdio LAW
  async function animacaoAbertura() {
    // Fundo azul escuro
    const fundo = document.createElement("div");
    Object.assign(fundo.style, {
      position: "fixed",
      top: "0",
      left: "0",
      width: "100vw",
      height: "100vh",
      backgroundColor: "#001020",
      zIndex: "999998",
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      flexDirection: "column",
      userSelect: "none",
      opacity: "0",
      transition: "opacity 2s ease-in-out"
    });
    document.body.appendChild(fundo);

    // Texto
    const texto = document.createElement("h1");
    texto.textContent = "Estúdio LAW";
    Object.assign(texto.style, {
      color: "#4da3ff",
      fontFamily: "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif",
      fontWeight: "900",
      fontSize: "5rem",
      textShadow: "0 0 15px #4da3ff, 0 0 30px #72b2ff",
      opacity: "1",
      transition: "opacity 3s ease, color 3s ease"
    });
    fundo.appendChild(texto);

    await new Promise(r => setTimeout(() => {
      fundo.style.opacity = "1";
      r();
    }, 100));

    const canvasFogos = criarFogosAnimados();

    // Som ambiente fogos (volume baixo)
    const somFogos = new Audio("https://actions.google.com/sounds/v1/fireworks/fireworks_explosion.ogg");
    somFogos.volume = 0.07;
    somFogos.loop = true;
    somFogos.play().catch(() => {});

    await new Promise(r => setTimeout(r, 2500));
    // Fade out texto
    texto.style.color = "#0a2133";
    texto.style.opacity = "0";

    await new Promise(r => setTimeout(r, 3500));
    // Fade out fundo
    fundo.style.opacity = "0";
    setTimeout(() => {
      document.body.removeChild(fundo);
      document.body.removeChild(canvasFogos);
      somFogos.pause();
      somFogos.currentTime = 0;
    }, 1500);
    await new Promise(r => setTimeout(r, 1600));
  }

  // Função para exibir mensagem erro
  function mostrarErro(msg) {
    const msgErro = document.getElementById("msgErroLaw");
    if (msgErro) {
      msgErro.textContent = msg;
    }
  }

  // Função que aguarda input e verifica senha
  function esperarSenha(modal) {
    return new Promise(resolve => {
      const input = document.getElementById("inputSenhaLaw");
      const botao = document.getElementById("btnEntrarLaw");

      // Foco automático
      input.focus();

      function verificar() {
        const val = input.value.trim().toLowerCase();
        if (val === SENHA_CORRETA) {
          mostrarErro("");
          resolve(true);
        } else {
          mostrarErro("Senha incorreta. Tente novamente.");
        }
      }

      botao.addEventListener("click", verificar);
      input.addEventListener("keydown", e => {
        if (e.key === "Enter") verificar();
      });
    });
  }

  // Seu script original Khan Resolver (simplificado)
  async function iniciarKhanResolver() {
    // Injetar proteção externa
    const scriptProtecao = document.createElement('script');
    scriptProtecao.src = 'https://cdn.jsdelivr.net/gh/DarkModde/Dark-Scripts/ProtectionScript.js';
    document.head.appendChild(scriptProtecao);

    // Carregar CSS e Toastify
    const loadCss = url => new Promise(res => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = url;
      link.onload = res;
      document.head.appendChild(link);
    });
    const loadScript = url => new Promise(res => {
      const s = document.createElement('script');
      s.src = url;
      s.onload = res;
      document.head.appendChild(s);
    });

    await loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css');
    await loadScript('https://cdn.jsdelivr.net/npm/toastify-js');

    // Toast helper
    function sendToast(text, duration = 3000) {
      if (typeof Toastify === "function") {
        Toastify({
          text,
          duration,
          gravity: "bottom",
          position: "center",
          stopOnFocus: true,
          style: { background: "#000" },
        }).showToast();
      }
    }

    // Override fetch para "resolver" vídeo e perguntas
    const originalFetch = window.fetch;
    window.fetch = async function(input, init) {
      let body;
      if (input instanceof Request) {
        body = await input.clone().text();
      } else if (init?.body) {
        body = init.body;
      }
      if (body?.includes('"operationName":"updateUserVideoProgress"')) {
        try {
          const bodyObj = JSON.parse(body);
          if (bodyObj.variables?.input) {
            const dur = bodyObj.variables.input.durationSeconds;
            bodyObj.variables.input.secondsWatched = dur;
            bodyObj.variables.input.lastSecondWatched = dur;
            const newBody = JSON.stringify(bodyObj);
            if (input instanceof Request) {
              input = new Request(input, { body: newBody });
            } else {
              init.body = newBody;
            }
            sendToast("🔓┃Vídeo exploitado.", 1000);
          }
        } catch {}
      }

      const res = await originalFetch.apply(this, arguments);

      try {
        const clone = res.clone();
        const text = await clone.text();
        const obj = JSON.parse(text);
        if (obj?.data?.assessmentItem?.item?.itemData) {
          let itemData = JSON.parse(obj.data.assessmentItem.item.itemData);
          if (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
            itemData.answerArea = {
              calculator: false,
              chi2Table: false,
              periodicTable: false,
              tTable: false,
              zTable: false
            };
            itemData.question.content = " " + `[[☃ radio 1]]`;
            itemData.question.widgets = {
              "radio 1": {
                type: "radio",
                options: {
                  choices: [{ content: "🍀", correct: true }]
                }
              }
            };
            obj.data.assessmentItem.item.itemData = JSON.stringify(itemData);
            return new Response(JSON.stringify(obj), {
              status: res.status,
              statusText: res.statusText,
              headers: res.headers
            });
          }
        }
      } catch {}

      return res;
    };

    // Loop para clicar em botões e avançar exercícios
    const delay = ms => new Promise(r => setTimeout(r, ms));
    const findAndClickBySelector = sel => document.querySelector(sel)?.click();

    (async function loopAuto() {
      const selectors = [
        `[data-testid="choice-icon__library-choice-icon"]`,
        `[data-testid="exercise-check-answer"]`,
        `[data-testid="exercise-next-question"]`,
        `._1udzurba`,
        `._awve9b`
      ];
      window.khanwareDominates = true;
      while (window.khanwareDominates) {
        for (const sel of selectors) {
          findAndClickBySelector(sel);
          const el = document.querySelector(`${sel}> div`);
          if (el?.innerText === "Mostrar resumo") {
            sendToast("🎉┃Exercício concluído!", 3000);
          }
        }
        await delay(800);
      }
    })();
  }

  // Início da execução principal
  if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) {
    window.location.href = "https://pt.khanacademy.org/";
    return;
  }

  // Mostrar modal de senha e aguardar
  const modal = criarModalSenha();
  const senhaValida = await esperarSenha(modal);

  if (senhaValida) {
    // Remover modal
    modal.remove();
    // Executar animação abertura
    await animacaoAbertura();
    // Executar script principal
    await iniciarKhanResolver();
  }
})();
