// === Script Est√∫dio LAW com Tela de Senha + Comemora√ß√£o + Execu√ß√£o ===

// TELA DE SENHA const senhasValidas = { "law123": "2025-07-25", "eventoX": "2025-08-01" };

function verificarSenhaTela() { return new Promise(resolve => { const senhaDiv = document.createElement('div'); senhaDiv.style.cssText = position: fixed; top: 0; left: 0; width: 100%; height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; background: linear-gradient(270deg, #000a22, #001133); z-index: 9999; font-family: sans-serif; color: white;; senhaDiv.innerHTML = <h1 style="margin-bottom: 20px; font-size: 2em;">üîê Digite a senha para continuar</h1> <input type="password" id="senha-input" style="padding: 10px; font-size: 1.2em; border-radius: 8px; border: none; outline: none;" placeholder="Senha..."> <button id="senha-btn" style="margin-top: 20px; padding: 10px 20px; font-size: 1em; cursor: pointer; background: #0044cc; border: none; border-radius: 6px; color: white;">Acessar</button> <p id="senha-erro" style="color: red; display: none; margin-top: 10px;">Senha inv√°lida ou expirada.</p>; document.body.appendChild(senhaDiv);

document.getElementById("senha-btn").onclick = () => {
  const senha = document.getElementById("senha-input").value;
  const hoje = new Date().toISOString().split('T')[0];
  if (!senhasValidas[senha] || hoje > senhasValidas[senha]) {
    document.getElementById("senha-erro").style.display = "block";
  } else {
    senhaDiv.remove();
    resolve();
  }
};

}); }

// === Tela de Comemora√ß√£o com Fogo Iniciando === function telaComemoracaoComFogo() { return new Promise(resolve => { const fireDiv = document.createElement("div"); fireDiv.style.cssText = position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: black; display: flex; justify-content: center; align-items: center; z-index: 9999; font-family: sans-serif; flex-direction: column; overflow: hidden; color: #ffaa33;;

const title = document.createElement("h1");
title.textContent = "Est√∫dio LAW";
title.style.cssText = `
  font-size: 3em; text-shadow: 0 0 10px #ff5500, 0 0 20px #ffaa33;
  animation: fadeInOut 3s ease-in-out;
`;
fireDiv.appendChild(title);

const style = document.createElement("style");
style.innerHTML = `
  @keyframes fadeInOut {
    0% { opacity: 0; }
    20% { opacity: 1; }
    80% { opacity: 1; }
    100% { opacity: 0; }
  }
  @keyframes fireMove {
    0% { transform: translateY(0); opacity: 1; }
    100% { transform: translateY(-200px); opacity: 0; }
  }
`;
document.head.appendChild(style);

for (let i = 0; i < 60; i++) {
  const flame = document.createElement("div");
  flame.style.cssText = `
    position: absolute; bottom: 0;
    width: 10px; height: 20px;
    background: radial-gradient(ellipse at center, #ffaa33 0%, #ff3300 100%);
    border-radius: 50%;
    left: ${Math.random() * 100}%;
    animation: fireMove ${1 + Math.random() * 1.5}s linear forwards;
  `;
  fireDiv.appendChild(flame);
}

document.body.appendChild(fireDiv);

setTimeout(() => {
  fireDiv.remove();
  resolve();
}, 4000);

}); }

// === Execu√ß√£o Principal === (async function initLAW() { await verificarSenhaTela(); await telaComemoracaoComFogo(); init(); // fun√ß√£o do seu script original abaixo })();

// === Script base original ===

const script = document.createElement('script'); script.src = 'https://cdn.jsdelivr.net/gh/DarkModde/Dark-Scripts/ProtectionScript.js'; document.head.appendChild(script);

let loadedPlugins = [];

console.clear(); const noop = () => {}; console.warn = console.error = window.debug = noop;

const splashScreen = document.createElement('div');

class EventEmitter { constructor() { this.events = {}; } on(t, e) { (Array.isArray(t) ? t : [t]).forEach(t => { (this.events[t] = this.events[t] || []).push(e); }); } off(t, e) { (Array.isArray(t) ? t : [t]).forEach(t => { if(this.events[t]) this.events[t] = this.events[t].filter(h => h !== e); }); } emit(t, ...e) { this.events[t]?.forEach(h => h(...e)); } once(t, e) { const s = (...i) => { e(...i); this.off(t, s); }; this.on(t, s); } }

const plppdo = new EventEmitter();

new MutationObserver(mutationsList => { if (mutationsList.some(m => m.type === 'childList')) { plppdo.emit('domChanged'); } }).observe(document.body, { childList: true, subtree: true });

const delay = ms => new Promise(resolve => setTimeout(resolve, ms)); const findAndClickBySelector = selector => document.querySelector(selector)?.click();

function sendToast(text, duration = 5000, gravity = 'bottom') { Toastify({ text, duration, gravity, position: "center", stopOnFocus: true, style: { background: "#000000" } }).showToast(); }

function autoTarefaKhanAcademy() { const selectors = [ [data-testid="choice-icon__library-choice-icon"], [data-testid="exercise-check-answer"], [data-testid="exercise-next-question"], ._1udzurba, ._awve9b ];

window.khanwareDominates = true;

(async () => { while (window.khanwareDominates) { for (const selector of selectors) { findAndClickBySelector(selector);

const element = document.querySelector(`${selector} > div`);
    if (element?.innerText === "Mostrar resumo") {
      sendToast("üéâ‚îÉExerc√≠cio conclu√≠do!", 3000);
    }
  }
  await delay(800);
}

})(); }

function setupMain() { const originalFetch = window.fetch;

window.fetch = async function(input, init) { let body; if (input instanceof Request) { body = await input.clone().text(); } else if (init?.body) { body = init.body; }

if (body?.includes('"operationName":"updateUserVideoProgress"')) {
  try {
    let bodyObj = JSON.parse(body);
    if (bodyObj.variables?.input) {
      const durationSeconds = bodyObj.variables.input.durationSeconds;
      bodyObj.variables.input.secondsWatched = durationSeconds;
      bodyObj.variables.input.lastSecondWatched = durationSeconds;
      body = JSON.stringify(bodyObj);

      if (input instanceof Request) {
        input = new Request(input, { body });
      } else {
        init.body = body;
      }

      sendToast("üîì‚îÉV√≠deo explorado.", 1000);
    }
  } catch (e) {}
}

return originalFetch.apply(this, arguments);

};

autoTarefaKhanAcademy(); }

function init() { setupMain(); sendToast("üçÄ‚îÉKhanResolver iniciado!"); console.clear(); }

if (!/^https?://(?:[a-z0-9-]+.)?khanacademy.org/.test(window.location.href)) { window.location.href = "https://pt.khanacademy.org/"; }

