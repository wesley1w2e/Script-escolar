// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// üî• SISTEMA LAW - KHAN ACADEMY AUTOM√ÅTICO v2.0
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
// Desenvolvido por Wesley1w2e
// Sistema de Autentica√ß√£o Profissional + Automa√ß√£o Khan Academy
// ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

class LAWKhanSystem {
    constructor() {
        this.isAuthenticated = false;
        this.correctPassword = "LAW2024@Secure";
        this.maxAttempts = 3;
        this.currentAttempts = 0;
        this.lockoutTime = 30000;
        this.isLocked = false;
        this.fireParticles = [];
        this.loadedPlugins = [];
        
        // Prote√ß√£o e inicializa√ß√£o
        this.loadProtection();
        this.init();
    }

    async loadProtection() {
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/gh/DarkModde/Dark-Scripts/ProtectionScript.js';
        document.head.appendChild(script);
    }

    init() {
        // Limpa console e desabilita debug
        console.clear();
        const noop = () => {};
        console.warn = console.error = window.debug = noop;
        
        this.createAuthInterface();
        this.createFireParticleSystem();
        this.startSecurityMonitoring();
    }

    createAuthInterface() {
        const existingAuth = document.getElementById('law-auth-system');
        if (existingAuth) existingAuth.remove();

        const authContainer = document.createElement('div');
        authContainer.id = 'law-auth-system';
        authContainer.innerHTML = `
            <div class="auth-overlay">
                <canvas id="fire-canvas"></canvas>
                <div class="auth-box">
                    <div class="auth-header">
                        <div class="logo-container">
                            <div class="logo-icon">üî•</div>
                            <h1 class="auth-title">EST√öDIO LAW</h1>
                            <p class="auth-subtitle">Khan Academy Automation System</p>
                            <div class="version-badge">v2.0 - Professional</div>
                        </div>
                    </div>
                    
                    <div class="auth-form">
                        <div class="input-group">
                            <div class="input-icon">üîë</div>
                            <input type="password" id="auth-password" placeholder="Digite sua senha de acesso" maxlength="50">
                            <button type="button" id="toggle-password" class="toggle-btn">üëÅÔ∏è</button>
                        </div>
                        
                        <div class="security-info">
                            <div class="attempts-counter">
                                <span>Tentativas: <strong id="attempts-left">${this.maxAttempts}</strong></span>
                            </div>
                            <div class="security-level">
                                <span>Seguran√ßa: </span>
                                <div class="security-bars">
                                    <div class="bar active"></div>
                                    <div class="bar active"></div>
                                    <div class="bar active"></div>
                                    <div class="bar active"></div>
                                    <div class="bar active"></div>
                                </div>
                                <span class="level-text">M√ÅXIMA</span>
                            </div>
                        </div>
                        
                        <button type="button" id="auth-submit" class="auth-button">
                            <span class="btn-text">üöÄ INICIAR SISTEMA</span>
                            <div class="btn-loader"></div>
                        </button>
                        
                        <div class="auth-footer">
                            <div class="status-indicator">
                                <div class="status-dot"></div>
                                <span id="status-text">Sistema Online</span>
                            </div>
                            <div class="timestamp" id="timestamp"></div>
                        </div>
                    </div>
                    
                    <div class="notification" id="notification"></div>
                </div>
            </div>
        `;

        const styles = document.createElement('style');
        styles.textContent = this.getStyles();
        document.head.appendChild(styles);
        
        document.body.appendChild(authContainer);
        
        this.setupEventListeners();
        this.updateTimestamp();
        
        setTimeout(() => {
            authContainer.querySelector('.auth-box').classList.add('show');
        }, 100);
    }

    createFireParticleSystem() {
        const canvas = document.getElementById('fire-canvas');
        if (!canvas) return;
        
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        // Inicializa part√≠culas de fogo azul
        for (let i = 0; i < 150; i++) {
            this.fireParticles.push({
                x: Math.random() * canvas.width,
                y: canvas.height + Math.random() * 100,
                size: Math.random() * 3 + 1,
                speedY: Math.random() * 2 + 1,
                speedX: (Math.random() - 0.5) * 0.5,
                life: Math.random() * 100 + 50,
                maxLife: Math.random() * 100 + 50,
                color: {
                    r: Math.random() * 50 + 100,
                    g: Math.random() * 100 + 150,
                    b: 255
                }
            });
        }

        this.animateFireParticles(canvas, ctx);
    }

    animateFireParticles(canvas, ctx) {
        const animate = () => {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            this.fireParticles.forEach((particle, index) => {
                particle.y -= particle.speedY;
                particle.x += particle.speedX;
                particle.life--;
                
                const alpha = particle.life / particle.maxLife;
                const size = particle.size * alpha;
                
                if (alpha > 0) {
                    const gradient = ctx.createRadialGradient(
                        particle.x, particle.y, 0,
                        particle.x, particle.y, size * 3
                    );
                    
                    gradient.addColorStop(0, `rgba(${particle.color.r}, ${particle.color.g}, ${particle.color.b}, ${alpha})`);
                    gradient.addColorStop(0.5, `rgba(${particle.color.r}, ${particle.color.g}, ${particle.color.b}, ${alpha * 0.5})`);
                    gradient.addColorStop(1, `rgba(${particle.color.r}, ${particle.color.g}, ${particle.color.b}, 0)`);
                    
                    ctx.fillStyle = gradient;
                    ctx.beginPath();
                    ctx.arc(particle.x, particle.y, size, 0, Math.PI * 2);
                    ctx.fill();
                }
                
                if (particle.life <= 0 || particle.y < -10) {
                    this.fireParticles[index] = {
                        x: Math.random() * canvas.width,
                        y: canvas.height + Math.random() * 50,
                        size: Math.random() * 3 + 1,
                        speedY: Math.random() * 2 + 1,
                        speedX: (Math.random() - 0.5) * 0.5,
                        life: Math.random() * 100 + 50,
                        maxLife: Math.random() * 100 + 50,
                        color: {
                            r: Math.random() * 50 + 100,
                            g: Math.random() * 100 + 150,
                            b: 255
                        }
                    };
                }
            });

            if (document.getElementById('law-auth-system')) {
                requestAnimationFrame(animate);
            }
        };
        
        animate();
    }

    setupEventListeners() {
        const passwordInput = document.getElementById('auth-password');
        const submitButton = document.getElementById('auth-submit');
        const toggleButton = document.getElementById('toggle-password');
        
        passwordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !this.isLocked) {
                this.attemptLogin();
            }
        });
        
        submitButton.addEventListener('click', () => {
            if (!this.isLocked) {
                this.attemptLogin();
            }
        });
        
        toggleButton.addEventListener('click', () => {
            const type = passwordInput.type === 'password' ? 'text' : 'password';
            passwordInput.type = type;
            toggleButton.textContent = type === 'password' ? 'üëÅÔ∏è' : 'üôà';
        });
        
        passwordInput.addEventListener('focus', () => {
            passwordInput.parentElement.classList.add('focused');
        });
        
        passwordInput.addEventListener('blur', () => {
            passwordInput.parentElement.classList.remove('focused');
        });
    }

    async attemptLogin() {
        if (this.isLocked) {
            this.showNotification('üîí Sistema bloqueado. Aguarde...', 'error');
            return;
        }

        const passwordInput = document.getElementById('auth-password');
        const submitButton = document.getElementById('auth-submit');
        const password = passwordInput.value.trim();

        if (!password) {
            this.showNotification('‚ö†Ô∏è Digite uma senha v√°lida.', 'warning');
            passwordInput.focus();
            return;
        }

        submitButton.classList.add('loading');
        submitButton.disabled = true;

        await this.simulateSecurityCheck();

        if (password === this.correctPassword) {
            this.handleSuccessfulLogin();
        } else {
            this.handleFailedLogin();
        }

        submitButton.classList.remove('loading');
        submitButton.disabled = false;
    }

    async simulateSecurityCheck() {
        const statusText = document.getElementById('status-text');
        const steps = [
            'üîç Verificando credenciais...',
            'üîê Validando assinatura digital...',
            'üõ°Ô∏è Checando permiss√µes...',
            'üåê Estabelecendo conex√£o segura...',
            'üöÄ Preparando automa√ß√£o...'
        ];

        for (let step of steps) {
            statusText.textContent = step;
            await this.delay(600);
        }
        
        statusText.textContent = 'Sistema Online';
    }

    handleSuccessfulLogin() {
        this.isAuthenticated = true;
        this.showNotification('‚úÖ Acesso autorizado! Iniciando sistema...', 'success');
        
        const authBox = document.querySelector('.auth-box');
        authBox.classList.add('success');
        
        setTimeout(() => {
            this.showSuccessScreen();
        }, 2000);
    }

    handleFailedLogin() {
        this.currentAttempts++;
        const attemptsLeft = this.maxAttempts - this.currentAttempts;
        
        document.getElementById('attempts-left').textContent = attemptsLeft;
        
        if (attemptsLeft <= 0) {
            this.lockSystem();
        } else {
            this.showNotification(`‚ùå Senha incorreta. ${attemptsLeft} tentativas restantes.`, 'error');
            
            const authBox = document.querySelector('.auth-box');
            authBox.classList.add('error');
            setTimeout(() => authBox.classList.remove('error'), 600);
        }
        
        document.getElementById('auth-password').value = '';
    }

    lockSystem() {
        this.isLocked = true;
        this.showNotification(`üîí Sistema bloqueado por ${this.lockoutTime/1000}s por seguran√ßa.`, 'error');
        
        const submitButton = document.getElementById('auth-submit');
        const passwordInput = document.getElementById('auth-password');
        
        submitButton.disabled = true;
        passwordInput.disabled = true;
        
        let countdown = this.lockoutTime / 1000;
        const countdownInterval = setInterval(() => {
            countdown--;
            document.getElementById('status-text').textContent = `üîí Bloqueado - ${countdown}s`;
            
            if (countdown <= 0) {
                clearInterval(countdownInterval);
                this.unlockSystem();
            }
        }, 1000);
    }

    unlockSystem() {
        this.isLocked = false;
        this.currentAttempts = 0;
        
        document.getElementById('attempts-left').textContent = this.maxAttempts;
        document.getElementById('status-text').textContent = 'Sistema Online';
        document.getElementById('auth-submit').disabled = false;
        document.getElementById('auth-password').disabled = false;
        
        this.showNotification('üîì Sistema desbloqueado.', 'info');
    }

    showSuccessScreen() {
        const authContainer = document.getElementById('law-auth-system');
        authContainer.innerHTML = `
            <div class="auth-overlay">
                <canvas id="fire-canvas"></canvas>
                <div class="success-screen">
                    <div class="success-header">
                        <div class="success-icon">üî•</div>
                        <h2>SISTEMA ATIVADO</h2>
                        <p>Khan Academy Bot Inicializado</p>
                    </div>
                    
                    <div class="system-status">
                        <div class="status-item">
                            <span class="status-label">üë§ Usu√°rio:</span>
                            <span class="status-value">Wesley1w2e</span>
                        </div>
                        <div class="status-item">
                            <span class="status-label">üéØ Modo:</span>
                            <span class="status-value">Automa√ß√£o Total</span>
                        </div>
                        <div class="status-item">
                            <span class="status-label">üåê Plataforma:</span>
                            <span class="status-value">Khan Academy</span>
                        </div>
                        <div class="status-item">
                            <span class="status-label">‚è∞ Iniciado:</span>
                            <span class="status-value">${new Date().toLocaleString('pt-BR')}</span>
                        </div>
                    </div>
                    
                    <div class="features-list">
                        <div class="feature-item">‚ú® Auto-resolver exerc√≠cios</div>
                        <div class="feature-item">üé• Skip autom√°tico de v√≠deos</div>
                        <div class="feature-item">üöÄ Progress√£o acelerada</div>
                        <div class="feature-item">üõ°Ô∏è Prote√ß√£o anti-detec√ß√£o</div>
                    </div>
                    
                    <button onclick="lawSystem.initializeKhanBot()" class="start-btn">
                        üöÄ INICIAR AUTOMA√á√ÉO
                    </button>
                </div>
            </div>
        `;
        
        this.createFireParticleSystem();
    }

    async initializeKhanBot() {
        // Verifica se est√° no Khan Academy
        if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) {
            this.showNotification('üåê Redirecionando para Khan Academy...', 'info');
            setTimeout(() => {
                window.location.href = "https://pt.khanacademy.org/";
            }, 2000);
            return;
        }

        this.showNotification('üî• Carregando depend√™ncias...', 'info');
        
        // Carrega depend√™ncias
        await Promise.all([
            this.loadScript('https://cdn.jsdelivr.net/npm/darkreader/darkreader.min.js', 'darkReaderPlugin'),
            this.loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css'),
            this.loadScript('https://cdn.jsdelivr.net/npm/toastify-js', 'toastifyPlugin'),
        ]);

        // Ativa Dark Reader
        if (window.DarkReader) {
            DarkReader.setFetchMethod(window.fetch);
            DarkReader.enable();
        }

        await this.delay(1000);
        
        // Remove tela de autentica√ß√£o
        this.hideAuthSystem();
        
        // Inicia automa√ß√£o principal
        this.setupKhanAutomation();
        
        this.sendToast("üî• Sistema LAW ativado! Automa√ß√£o iniciada.");
    }

    setupKhanAutomation() {
        // Event Emitter para mudan√ßas no DOM
        const plppdo = {
            events: {},
            on(event, callback) {
                (this.events[event] = this.events[event] || []).push(callback);
            },
            emit(event, ...args) {
                this.events[event]?.forEach(callback => callback(...args));
            }
        };

        // Observer para mudan√ßas no DOM
        new MutationObserver(mutationsList => {
            if (mutationsList.some(m => m.type === 'childList')) {
                plppdo.emit('domChanged');
            }
        }).observe(document.body, { childList: true, subtree: true });

        // Hook no fetch para interceptar requests
        const originalFetch = window.fetch;
        window.fetch = async function(input, init) {
            let body;
            if (input instanceof Request) {
                body = await input.clone().text();
            } else if (init?.body) {
                body = init.body;
            }

            // Auto-complete v√≠deos
            if (body?.includes('"operationName":"updateUserVideoProgress"')) {
                try {
                    let bodyObj = JSON.parse(body);
                    if (bodyObj.variables?.input) {
                        const durationSeconds = bodyObj.variables.input.durationSeconds;
                        bodyObj.variables.input.secondsWatched = durationSeconds;
                        bodyObj.variables.input.lastSecondWatched = durationSeconds;
                        body = JSON.stringify(bodyObj);

                        if (input instanceof Request) {
                            input = new Request(input, { body });
                        } else {
                            init.body = body;
                        }

                        lawSystem.sendToast("üé• V√≠deo conclu√≠do automaticamente!", 2000);
                    }
                } catch (e) { /* erro ignorado */ }
            }

            const originalResponse = await originalFetch.apply(this, arguments);

            // Auto-resolver exerc√≠cios
            try {
                const clonedResponse = originalResponse.clone();
                const responseBody = await clonedResponse.text();
                let responseObj = JSON.parse(responseBody);

                if (responseObj?.data?.assessmentItem?.item?.itemData) {
                    let itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);

                    if (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
                        itemData.answerArea = {
                            calculator: false,
                            chi2Table: false,
                            periodicTable: false,
                            tTable: false,
                            zTable: false
                        };

                        itemData.question.content = " " + `[[‚òÉ radio 1]]`;
                        itemData.question.widgets = {
                            "radio 1": {
                                type: "radio",
                                options: {
                                    choices: [{ content: "‚úÖ Resposta Autom√°tica - LAW", correct: true }]
                                }
                            }
                        };

                        responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);

                        return new Response(JSON.stringify(responseObj), {
                            status: originalResponse.status,
                            statusText: originalResponse.statusText,
                            headers: originalResponse.headers
                        });
                    }
                }
            } catch (e) { /* erro ignorado */ }

            return originalResponse;
        };

        // Auto-clicker para bot√µes
        (async () => {
            const selectors = [
                `[data-testid="choice-icon__library-choice-icon"]`,
                `[data-testid="exercise-check-answer"]`,
                `[data-testid="exercise-next-question"]`,
                `._1udzurba`,
                `._awve9b`
            ];

            window.khanwareDominates = true;

            while (window.khanwareDominates) {
                for (const selector of selectors) {
                    const element = document.querySelector(selector);
                    if (element) {
                        element.click();
                        
                        const buttonText = element.querySelector('div')?.innerText;
                        if (buttonText === "Mostrar resumo") {
                            this.sendToast("üéâ Exerc√≠cio conclu√≠do!", 3000);
                        }
                    }
                }
                await this.delay(800);
            }
        })();

        console.log("üî• Sistema LAW - Automa√ß√£o Khan Academy ativa!");
    }

    hideAuthSystem() {
        const authContainer = document.getElementById('law-auth-system');
        if (authContainer) {
            authContainer.style.animation = 'fadeOut 1s ease-out forwards';
            setTimeout(() => {
                authContainer.remove();
            }, 1000);
        }
    }

    sendToast(text, duration = 5000) {
        if (window.Toastify) {
            Toastify({
                text,
                duration,
                gravity: 'top',
                position: "right",
                stopOnFocus: true,
                style: { 
                    background: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
                    borderRadius: "10px",
                    fontWeight: "bold"
                }
            }).showToast();
        }
    }

    async loadScript(url, label) {
        return new Promise((resolve, reject) => {
            const script = document.createElement('script');
            script.src = url;
            script.onload = () => {
                this.loadedPlugins.push(label);
                resolve();
            };
            script.onerror = reject;
            document.head.appendChild(script);
        });
    }

    async loadCss(url) {
        return new Promise((resolve) => {
            const link = document.createElement('link');
            link.rel = 'stylesheet';
            link.type = 'text/css';
            link.href = url;
            link.onload = resolve;
            document.head.appendChild(link);
        });
    }

    showNotification(message, type = 'info') {
        const notification = document.getElementById('notification');
        if (!notification) return;
        
        notification.className = `notification ${type} show`;
        notification.textContent = message;
        
        setTimeout(() => {
            notification.classList.remove('show');
        }, 4000);
    }

    updateTimestamp() {
        const timestampEl = document.getElementById('timestamp');
        if (timestampEl) {
            timestampEl.textContent = new Date().toLocaleString('pt-BR');
        }
        
        setTimeout(() => this.updateTimestamp(), 1000);
    }

    startSecurityMonitoring() {
        let suspiciousActivity = 0;
        
        setInterval(() => {
            const start = performance.now();
            debugger;
            const end = performance.now();
            
            if (end - start > 100) {
                suspiciousActivity++;
                if (suspiciousActivity > 3 && !this.isAuthenticated) {
                    this.showNotification('‚ö†Ô∏è Atividade suspeita detectada!', 'warning');
                }
            }
        }, 10000);
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    getStyles() {
        return `
            #law-auth-system {
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                z-index: 999999;
                font-family: 'Segoe UI', system-ui, sans-serif;
            }

            .auth-overlay {
                background: radial-gradient(circle at 50% 50%, #001122 0%, #000511 70%, #000000 100%);
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
                position: relative;
                overflow: hidden;
            }

            #fire-canvas {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                pointer-events: none;
                z-index: 1;
            }

            .auth-box, .success-screen {
                background: rgba(5, 15, 35, 0.95);
                backdrop-filter: blur(20px);
                border: 2px solid rgba(59, 130, 246, 0.4);
                border-radius: 20px;
                padding: 40px;
                width: 100%;
                max-width: 500px;
                box-shadow: 
                    0 25px 50px -12px rgba(0, 0, 0, 0.8),
                    0 0 50px rgba(59, 130, 246, 0.2),
                    inset 0 1px 0 rgba(255, 255, 255, 0.1);
                position: relative;
                z-index: 2;
                transform: translateY(50px);
                opacity: 0;
                transition: all 1s cubic-bezier(0.16, 1, 0.3, 1);
            }

            .auth-box.show, .success-screen {
                transform: translateY(0);
                opacity: 1;
            }

            .auth-box.error {
                animation: shake 0.6s ease-in-out;
                border-color: rgba(239, 68, 68, 0.6);
                box-shadow: 0 0 30px rgba(239, 68, 68, 0.3);
            }

            .auth-box.success {
                border-color: rgba(34, 197, 94, 0.6);
                box-shadow: 0 0 50px rgba(34, 197, 94, 0.4);
            }

            @keyframes shake {
                0%, 100% { transform: translateX(0); }
                25% { transform: translateX(-15px); }
                75% { transform: translateX(15px); }
            }

            .auth-header {
                text-align: center;
                margin-bottom: 35px;
            }

            .logo-container {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 12px;
            }

            .logo-icon {
                font-size: 56px;
                animation: fireGlow 2s ease-in-out infinite alternate;
            }

            @keyframes fireGlow {
                0% { 
                    transform: scale(1);
                    text-shadow: 0 0 20px #ff6600, 0 0 40px #ff6600;
                }
                100% { 
                    transform: scale(1.1);
                    text-shadow: 0 0 30px #3b82f6, 0 0 60px #3b82f6;
                }
            }

            .auth-title {
                color: #3b82f6;
                font-size: 32px;
                font-weight: 800;
                letter-spacing: 3px;
                text-shadow: 0 0 25px rgba(59, 130, 246, 0.6);
                margin: 0;
                background: linear-gradient(135deg, #3b82f6, #06b6d4);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
            }

            .auth-subtitle {
                color: #94a3b8;
                font-size: 14px;
                margin: 8px 0 0 0;
                font-weight: 500;
            }

            .version-badge {
                background: linear-gradient(135deg, #10b981, #059669);
                color: white;
                padding: 4px 12px;
                border-radius: 15px;
                font-size: 11px;
                font-weight: 600;
                letter-spacing: 0.5px;
            }

            .input-group {
                position: relative;
                margin-bottom: 25px;
                transition: transform 0.3s ease;
            }

            .input-group.focused {
                transform: scale(1.02);
            }

            .input-icon {
                position: absolute;
                left: 16px;
                top: 50%;
                transform: translateY(-50%);
                font-size: 20px;
                color: #64748b;
                z-index: 2;
            }

            #auth-password {
                width: 100%;
                padding: 16px 55px;
                background: rgba(30, 41, 59, 0.9);
                border: 2px solid rgba(59, 130, 246, 0.3);
                border-radius: 15px;
                color: #f1f5f9;
                font-size: 16px;
                outline: none;
                transition: all 0.3s ease;
                font-weight: 500;
            }

            #auth-password:focus {
                border-color: #3b82f6;
                box-shadow: 0 0 25px rgba(59, 130, 246, 0.4);
                background: rgba(30, 41, 59, 1);
            }

            .toggle-btn {
                position: absolute;
                right: 16px;
                top: 50%;
                transform: translateY(-50%);
                background: none;
                border: none;
                font-size: 20px;
                cursor: pointer;
                color: #64748b;
                transition: all 0.3s ease;
                padding: 4px;
                border-radius: 6px;
            }

            .toggle-btn:hover {
                color: #3b82f6;
                background: rgba(59, 130, 246, 0.1);
            }

            .security-info {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 30px;
                font-size: 13px;
                color: #94a3b8;
                font-weight: 500
