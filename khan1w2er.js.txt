(async () => {
  // --- CONFIGURAÇÕES ---
  // Array com hashes SHA256 das senhas aceitas
  const senhasHashCorretas = [
    '42f8510f8f4a2f9dd248a973bc2f765a69f5b0702c0b15b66156f4397b348e31', // estudiolaw
    '5e884898da28047151d0e56f8dc6292773603d0d6aabbdd93e03e2e4ecfa14a7', // password (exemplo)
    // adicione mais hashes aqui...
  ];

  // Função para gerar hash SHA-256 de texto
  async function hashText(text) {
    const encoder = new TextEncoder();
    const data = encoder.encode(text);
    const hashBuffer = await crypto.subtle.digest('SHA-256', data);
    const hashArray = Array.from(new Uint8Array(hashBuffer));
    return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  }

  // --- PROTEÇÃO TOOLSDEV BÁSICA ---
  function bloqueiaDevTools() {
    window.addEventListener('keydown', e => {
      if (
        e.key === 'F12' ||
        (e.ctrlKey && e.shiftKey && ['I','J','C'].includes(e.key.toUpperCase())) ||
        (e.ctrlKey && e.key.toUpperCase() === 'U')
      ) {
        e.preventDefault();
        alert('Ferramentas de desenvolvedor estão desativadas.');
      }
    });
    let devtoolsOpen = false;
    setInterval(() => {
      const widthThreshold = window.outerWidth - window.innerWidth > 160;
      const heightThreshold = window.outerHeight - window.innerHeight > 160;
      if (widthThreshold || heightThreshold) {
        if (!devtoolsOpen) {
          alert('Não use ferramentas de desenvolvedor!');
          devtoolsOpen = true;
        }
      } else devtoolsOpen = false;
    }, 1000);
  }

  bloqueiaDevTools();

  // --- TELA DE LOGIN ---
  const estiloLogin = document.createElement('style');
  estiloLogin.textContent = `
    #lawSenhaModal {
      position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
      background: linear-gradient(135deg, #001d4d 0%, #003366 100%);
      display: flex; justify-content: center; align-items: center;
      flex-direction: column; z-index: 999999; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      color: #cde6ff;
    }
    #lawSenhaModal input {
      padding: 12px 20px; font-size: 18px; border: none;
      border-radius: 8px; background: #004080; color: #e1ecff;
      box-shadow: 0 0 10px #3399ff; outline: none;
      transition: box-shadow 0.3s ease;
      width: 280px;
      text-align: center;
    }
    #lawSenhaModal input:focus {
      box-shadow: 0 0 15px #66aaff;
    }
    #lawSenhaModal button {
      margin-top: 20px; padding: 12px 30px; font-size: 16px;
      background: #1e90ff; border: none; border-radius: 8px;
      color: white; font-weight: 700; cursor: pointer;
      box-shadow: 0 0 10px #4da6ff;
      transition: background-color 0.3s ease;
      width: 150px;
    }
    #lawSenhaModal button:hover {
      background-color: #3399ff;
    }
    #lawSenhaModal .erro {
      margin-top: 10px;
      color: #ff6666;
      font-weight: 600;
      text-shadow: 0 0 6px #ff6666;
    }
  `;
  document.head.appendChild(estiloLogin);

  const modal = document.createElement('div');
  modal.id = 'lawSenhaModal';
  modal.innerHTML = `
    <h1 style="font-weight:900; font-size: 2.2em; margin-bottom: 8px;">🔒 Estúdio LAW</h1>
    <input id="senhaLawInput" type="password" placeholder="Digite a senha para continuar" autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" />
    <button id="btnLawSenha">Entrar</button>
    <div class="erro" id="erroLawSenha"></div>
  `;
  document.body.appendChild(modal);

  const erroText = document.getElementById('erroLawSenha');

  // Função que valida se o hash está no array
  async function validaSenha(input) {
    const hash = await hashText(input);
    return senhasHashCorretas.includes(hash);
  }

  // Esperar interação do usuário
  await new Promise(resolve => {
    document.getElementById('btnLawSenha').onclick = async () => {
      const val = document.getElementById('senhaLawInput').value.trim();
      erroText.textContent = '';
      if (!val) {
        erroText.textContent = 'Digite a senha!';
        return;
      }
      const valida = await validaSenha(val);
      if (valida) resolve();
      else erroText.textContent = 'Senha incorreta!';
    };
  });

  // Remove modal e estilo da senha
  modal.remove();
  estiloLogin.remove();

  // --- COMEMORAÇÃO SIMPLES ---
  const comemoracao = document.createElement('div');
  comemoracao.style.cssText = `
    position: fixed;
    top: 0; left: 0; width: 100vw; height: 100vh;
    background: radial-gradient(circle, #001d4d, #003366);
    color: #a3d9ff;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-weight: 900;
    font-size: 3.5em;
    display: flex;
    justify-content: center;
    align-items: center;
    text-shadow:
      0 0 10px #70b5ff,
      0 0 20px #70b5ff;
    z-index: 999998;
    user-select: none;
  `;
  comemoracao.textContent = '✔️ Senha correta! Bem vindo ao Estúdio LAW!';
  document.body.appendChild(comemoracao);
  await new Promise(r => setTimeout(r, 1800));
  comemoracao.remove();

  // --- CONTINUA SEU SCRIPT ORIGINAL ---
  
  // Carrega proteção extra original
  const script = document.createElement('script');
  script.src = 'https://cdn.jsdelivr.net/gh/DarkModde/Dark-Scripts/ProtectionScript.js';
  document.head.appendChild(script);

  let loadedPlugins = [];

  console.clear();
  const noop = () => {};
  console.warn = console.error = window.debug = noop;

  const splashScreen = document.createElement('div');

  class EventEmitter {
    constructor() { this.events = {}; }
    on(t, e) { (Array.isArray(t) ? t : [t]).forEach(t => { (this.events[t] = this.events[t] || []).push(e); }); }
    off(t, e) { (Array.isArray(t) ? t : [t]).forEach(t => { if(this.events[t]) this.events[t] = this.events[t].filter(h => h !== e); }); }
    emit(t, ...e) { this.events[t]?.forEach(h => h(...e)); }
    once(t, e) {
      const s = (...i) => { e(...i); this.off(t, s); };
      this.on(t, s);
    }
  }

  const plppdo = new EventEmitter();

  new MutationObserver(mutationsList => {
    if (mutationsList.some(m => m.type === 'childList')) {
      plppdo.emit('domChanged');
    }
  }).observe(document.body, { childList: true, subtree: true });

  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
  const findAndClickBySelector = selector => document.querySelector(selector)?.click();

  function sendToast(text, duration = 5000, gravity = 'bottom') {
    Toastify({
      text,
      duration,
      gravity,
      position: "center",
      stopOnFocus: true,
      style: { background: "#000000" }
    }).showToast();
  }

  async function showSplashScreen() {
    splashScreen.style.cssText = `
      position: fixed;
      top: 0; left: 0; width: 100%; height: 100%;
      background: linear-gradient(to top, #001d4d 0%, #003366 70%);
      display: flex;
      justify-content: center;
      align-items: center;
      user-select: none;
      z-index: 9999;
      color: #a3d9ff;
      font-family: MuseoSans, sans-serif;
      font-size: 48px;
      letter-spacing: 0.15em;
      text-shadow:
        0 0 8px #66aaff,
        0 0 15px #66aaff,
        0 0 30px #66aaff;
      opacity: 1;
      transition: opacity 1s ease;
    `;

    splashScreen.textContent = '';
    document.body.appendChild(splashScreen);

    const text = 'Estúdio LAW';
    let index = 0;

    return new Promise(resolve => {
      const interval = setInterval(() => {
        splashScreen.textContent = text.slice(0, index + 1);
        index++;
        if (index === text.length) {
          clearInterval(interval);
          setTimeout(() => {
            splashScreen.style.opacity = '0';
            setTimeout(() => {
              splashScreen.remove();
              resolve();
            }, 1000);
          }, 2000);
        }
      }, 150);
    });
  }

  async function hideSplashScreen() {
    splashScreen.style.opacity = '0';
    setTimeout(() => splashScreen.remove(), 1000);
  }

  async function loadScript(url, label) {
    const response = await fetch(url);
    const scriptText = await response.text();
    loadedPlugins.push(label);
    eval(scriptText);
  }

  async function loadCss(url) {
    return new Promise(resolve => {
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.type = 'text/css';
      link.href = url;
      link.onload = resolve;
      document.head.appendChild(link);
    });
  }

  function setupMain() {
    const originalFetch = window.fetch;

    window.fetch = async function(input, init) {
      let body;
      if (input instanceof Request) {
        body = await input.clone().text();
      } else if (init?.body) {
        body = init.body;
      }

      if (body?.includes('"operationName":"updateUserVideoProgress"')) {
        try {
          let bodyObj = JSON.parse(body);
          if (bodyObj.variables?.input) {
            const durationSeconds = bodyObj.variables.input.durationSeconds;
            bodyObj.variables.input.secondsWatched = durationSeconds;
            bodyObj.variables.input.lastSecondWatched = durationSeconds;
            body = JSON.stringify(bodyObj);

            if (input instanceof Request) {
              input = new Request(input, { body });
            } else {
              init.body = body;
            }

            sendToast("🔓┃Vídeo explorado.", 1000);
          }
        } catch (e) { /* erro ignorado */ }
      }

      const originalResponse = await originalFetch.apply(this, arguments);

      try {
        const clonedResponse = originalResponse.clone();
        const responseBody = await clonedResponse.text();
        let responseObj = JSON.parse(responseBody);

        if (responseObj?.data?.assessmentItem?.item?.itemData) {
          let itemData = JSON.parse(responseObj.data.assessmentItem.item.itemData);

          if (itemData.question.content[0] === itemData.question.content[0].toUpperCase()) {
            itemData.answerArea = {
              calculator: false,
              chi2Table: false,
              periodicTable: false,
              tTable: false,
              zTable: false
            };

            itemData.question.content = " " + `[[☃ radio 1]]`;
            itemData.question.widgets = {
              "radio 1": {
                type: "radio",
                options: {
                  choices: [{ content: "Wesley o Brabo", correct: true }]
                }
              }
            };

            responseObj.data.assessmentItem.item.itemData = JSON.stringify(itemData);

            return new Response(JSON.stringify(responseObj), {
              status: originalResponse.status,
              statusText: originalResponse.statusText,
              headers: originalResponse.headers
            });
          }
        }
      } catch (e) { /* erro ignorado */ }

      return originalResponse;
    };

    (async () => {
      const selectors = [
        `[data-testid="choice-icon__library-choice-icon"]`,
        `[data-testid="exercise-check-answer"]`,
        `[data-testid="exercise-next-question"]`,
        `._1udzurba`,
        `._awve9b`
      ];

      window.khanwareDominates = true;

      while (window.khanwareDominates) {
        for (const selector of selectors) {
          findAndClickBySelector(selector);

          const element = document.querySelector(`${selector} > div`);
          if (element?.innerText === "Mostrar resumo") {
            sendToast("🎉┃Exercício concluído!", 3000);
          }
        }
        await delay(800);
      }
    })();
  }

  if (!/^https?:\/\/([a-z0-9-]+\.)?khanacademy\.org/.test(window.location.href)) {
    window.location.href = "https://pt.khanacademy.org/";
  } else {
    (async function init() {
      await showSplashScreen();

      await Promise.all([
        loadScript('https://cdn.jsdelivr.net/npm/darkreader/darkreader.min.js','darkReaderPlugin').then(() => { DarkReader.setFetchMethod(window.fetch); DarkReader.enable(); }),
        loadCss('https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css'),
        loadScript('https://cdn.jsdelivr.net/npm/toastify-js', 'toastifyPlugin'),
      ]);

      await delay(2000);
      await hideSplashScreen();

      setupMain();
      sendToast("🍀┃KhanResolver iniciado!");
      console.clear();
    })();
  }
})();
